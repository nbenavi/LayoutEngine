INTSourceChangelist:2420249
Availability:Public
Title:ブループリントで変数をレプリケーションする方法
Crumbs: %ROOT%, Gameplay, Gameplay\HowTo\Networking\ReplicateVariable
Description:ブループリントで Replicated 変数および RepNotify 変数を使用するためのガイド
Related:Engine/Blueprints
Related:Resources/ContentExamples/Networking


[TOC (start:2 end:2)]

## 概要

[INCLUDE:Gameplay/HowTo/Networking/ReplicateVariable#overview]

このページでは、**Replicated** 変数と **RepNotify** 変数の使用例について説明します。 

## Replicated

 _この例では、 **Blueprint Third Person Template with Starter Content** を使用します。_

この例では、**Replicated** 変数を作成します。これは、サーバーとクライアントの双方で参照できるカウントダウン タイマーで使用されます。 

1.	**Game/StarterContent/Blueprints** フォルダ内で、**Blueprint_Effect_Fire** ブループリントを開き、**[デフォルト]** タブをクリックします。 

1.	**Replication** で **Replicates** オプションにチェックを入れてこのブループリントでレプリケーションを有効にします。 

	![](HT_0.png)

1.	**[コンポーネント]** タブをクリックし、**Add Component** ボタンをクリックし、**Text Render** コンポーネントを探して追加します。 

	![](HT_1.png)

1.	ビューポート内でテキストが見えやすくなるように必要な位置に移動します。 

	![](HT_2.png)

1.	**[グラフ]** タブをクリックし、グラフ内で **右クリック** し、**Event Begin Play** ノードを追加します。 

1.	**Event Begin Play** からドラッグして、 **Switch Has Authority** ノードを探して追加します。 

1.	**Authority** ピンからドラッグして、**Time** が **1** に設定され、**Looping** にチェックが入れられた **Set Timer** ノードを追加します。 

	![](HT_3.png)

	ここでは、**Switch Has Authority** ノードを使用して、このブループリントがスポーンしたときに Authority (Server) でのみ **Set Timer** 関数を呼び出します。このノードを使用して Timer 関数が確実にサーバーでのみ実行し、クライアントでは実行されないようにします。このスクリプトがゲームのクリティカル データを処理する場合、不正を防ぐために、クライアントで実行するのではなくサーバーでのみ実行し、それからクライアント マシンでデータをレプリケーションするようにします。 

1.	**[MyBlueprint]** ウィンドウで、 **CountDownTimer** と呼ばれる **Integer** 変数を新規で作成します。 

1.	**[コンパイル]** をクリックします。次にタイマーの **デフォルト値** を **10** に設定します。 

	![](HT_4.png)

1.	グラフ内を **右クリック** して、 **Update Timer** と呼ばれる **カスタム イベント** を新規で作成します。 

1.	イベントを **Branch** ノードに接続し、**True** ピンから **Set CountDownTimer** ノードを追加します。 

1.	グラフ内を **右クリック** し、**Get CountDownTimer** ノードを追加します。次にそれをドラッグして **Int - Int** ノードを使用してボックスに 1 を入力します。 

1.	**CountDownTimer** ノードを再度ドラッグして **Int > Int** ノードを使用して以下のようにノードを接続します。 

	![](HT_5.png)

	ここでは、**UpdateTimer** が呼び出されるたびに **CountDownTimer** に対してそこから 1 を差し引くこと (ただしタイマーが 0 より大きい場合に限る) を指示しています。 

1.	**Set Timer** ノードの **Function Name** でカスタム イベント (**UpdateTimer**) の名前を追加します。 

	![](HT_6.png)

	これで、タイマーに対してストップと指示するまで **UpdateTimer** イベントが１秒毎に呼び出されます。 

1.	グラフ内を **右クリック** して、**Event Tick** ノードを追加します。 

1.	**Control** キーを押した状態で **MyBlueprint** ウィンドウから **TextRender1** コンポーネント内をドラッグし、そこからドラッグして **Set Text** ノードを追加します。 

1.	**Control** を押しながら、 **CountDownTimer** 変数をドラッグしてそれを **Set Text** ノードの **Value** に接続します。 

	![](HT_7.png)

	ここでは、簡単な方法を使用してテキスト レンダーにあるテキストを更新し、**CountDownTimer** の値を表示します。 

1.	**コンパイル** し **保存** してから、ブループリントを閉じます。 

1.	**コンテンツ ブラウザ** から **Blueprint_Effect_Fire** をレベルにドラッグします。 

	![](HT_9.png)

1.	レベル内で **PlayerStart** アイコンを選択し、 **Control+W** を押して複製します。 

1.	**PlayerStart** と炎のエフェクトをレベル内で配置してプレイヤースタートの前に位置するようにします。 

	![](HT_10.png)

1.	メインツールバーで **[Play]** ボタンの横にある下向きの矢印をクリックし、**Number of Players** を 2 (またはそれより大きい数) に設定します。 

1.	**[再生]** ボタンをクリックして、エディタで再生します。 

	![](HT_11.png)

	エディタで再生する場合、**Server** は 0 までカウントダウンしますが、 **クライアント** はしません。 

1.	**Blueprint_Effect_Fire** ブループリントに戻ります。 

1.	**MyBlueprint** ウィンドウで、**CountDownTimer** 変数をクリックして **Replication** オプションを **Replicated** を使用するように変更します。 

	![](HT_12.png)

1.	グラフが更新し、**CountDownTimer** 変数もエラーを示し、アイコンがノード上に表示されます。 

	![](HT_13.png)

	**[コンパイル]** をクリックするとエラーメッセージは消えます。しかし、アイコン (上の画面の黄色いボックス) は変数が **Replicated** に設定されていることを示し、グラフ内で見るとどの変数がレプリケーションされるか否かを簡単に判断できるようになります。 

1.	**コンパイル** し **保存** してから、ブループリントを閉じてエディタで再生します。 

	![](HT_14.png)

	これでサーバーとクライアントの両方で 10 からカウントダウンするようになり、テキストを適切に表示します。テキスト レンダーを更新するために整数を使用していますが、この変数はプレイヤー キャラクターのヘルス、武器、その他のゲームプレイ関連の変数を表すために簡単に使用することができます。 



## RepNotify

 _この例では、引き続き上記の **Replicated** の例を使用します。_

上記の **Replicated** の例では、サーバーとクライアントの両方で表示されるカウントダウン タイマーを作成しました。ここの例では、 **RepNotify** 変数を使用し、カウントダウン タイマーが 0 になると通知し、この時点でサーバーとクライアントの両方で炎のエフェクトを無効にします。 

1.	**Game/StarterContent/Blueprints** フォルダ内で、**Blueprint_Effect_Fire** ブループリントを開きます。 

1.	**[MyBlueprint]** ウィンドウで、 **Control** を押しながら **P_Fire** エフェクト内でドラッグして、そこからドラッグして **Deactivate** ノードを使用します。 

1. **Update** タイマーに接続された **Branch** の **False** ピンから、 **Deactivate** ノードに接続します。 

	![](HT_15.png)

	ここでは、**UpdateTimer** が呼び出されると、**CountDownTimer** から 1 を差し引くこと (0 より大きい場合に限り) を示しています。0 よりも大きくなければ、 **P_Fire** パーティクル エフェクトを **Deactivate** します。

1.	**コンパイル** し **保存** してから、ブループリントを閉じてエディタで再生します。 

	![](HT_16.png)

	エディタで再生する場合、0 になると炎のエフェクトはサーバー側でのみ無効になります。 

1.	**Blueprint_Effect_Fire** ブループリントに戻ります。 **Deactivate** と呼ばれる **Boolean** 型の変数を新規で作成します。 

1.	**Deactivate** 変数で、**Replication** タイプを **RepNotify** に必ず設定するようにします。 

	![](HT_17.png)

1.	変数を **RepNotify** に設定後、新しい関数が自動的に作成されたことがわかります。 

	![](HT_18.png)

	この関数は、**RepNotify** として代入された変数が変更されるたびに呼び出され、サーバーとクライアントの両方で実行されます。 

1.	 **On Rep Deactivate** 関数を **ダブルクリック** して開きます。 

1.	**Control** を押しながら **P_Fire** コンポーネント内でドラッグして、そこから **Deactivate** ノードを使用します。 

	![](HT_19.png)

1.	**Event Graph** に戻り、**UpdateTimer** イベントを探します。 

1.	**Branch** の **False** から **True** に設定されるようにチェックが入った **Set Deactivate** ノードを追加します。 

	![](HT_20.png)

	変数に **Set w/Notify** と表示され、Notify 関数も呼び出されることを表しています。 

1.	**コンパイル** し **保存** してから、ブループリントを閉じてエディタで再生します。 

	![](HT_21.png)

	今回はエディタで再生する場合、タイマーが 0 になるとクライアントとサーバーの両方で炎のエフェクトが無効になります。 


